<launch>
    <!-- The filename can be passed into the launch file to override the default. -->
    <arg name="filename" default="soonduck.xacro" />
    <arg name="file" default="$(find sd_simulation)/description/$(arg filename)" />
    
    <!-- Use the file argument as the name of the file used to set the /robot_description parameter on the parameter server -->
    <param name="robot_description" command="$(find xacro)/xacro $(arg file)" />

    <!-- Run the robot_state_publisher. -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

    <!-- Run RVIZ with a configuration file. If RVIZ is closed, close everything. -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find sd_simulation)/config/config.rviz" required="true" />

    <!-- Run Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find sd_simulation)/worlds/obstacles.world"/>
        <!-- <arg name="world_name" value="$(find vehicle_sim)/worlds/gazebo_world_description/worlds/mcity.world"/> -->
        <!-- <arg name="world_name" value="$(find vehicle_sim)/worlds/gazebo_world_description/worlds/citysim_gazebo9.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_autorace_2020.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_autorace.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_stage_1.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_stage_2.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_stage_3.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_stage_4.world"/> -->
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world"/> -->
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- Spawn a robot into Gazebo -->
    <node name="gazebo_spawn_model" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model soonduck -z 1" />

    <!-- Run the keyboard driver -->
    <node name="keyboard_driver_node" pkg="sd_keyboard_driver" type="keyboard_driver_node.py" output="screen" />

    <!-- Add ball detecter and follower parameters -->
    <rosparam command="load" file="$(find sd_perception)/config/ball_detecter_params_sim.yaml" />
    <rosparam command="load" file="$(find sd_navigation)/config/ball_follower_params_sim.yaml" />

    <!-- Run ball detection node -->
    <node name="detect_ball_node" pkg="sd_perception" type="detect_ball_node.py" output="screen" />
    <node name="detect_ball_3d_node" pkg="sd_perception" type="detect_ball_3d_node.py" output="screen" />

    <!-- Run ball following node -->
    <node name="follow_ball_node" pkg="sd_navigation" type="follow_ball_node.py" output="screen" />

    <!-- Run SLAM -->
    <node pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen">
        <rosparam command="load" file="$(find sd_slam)/config/mapper_params_online_async.yaml" />
    </node>

    <!-- Run joint staste publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen">
        <param name="use_gui" value="false"/>
    </node>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <!-- <rosparam file="$(find sd_simulation)/config/ros_control.yaml" command="load"/> -->

    <!-- load the controllers -->
    <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="soonduck_sim" args="left_wheel_position_controller right_wheel_position_controller joint_state_controller"/> -->

    <!-- convert joint states to TF transforms for rviz, etc -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <remap from="/joint_states" to="/soonduck_sim/joint_states" />
    </node> -->
</launch>